// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  role           String? //役割
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // StudentProfileとのリレーション
  studentProfile StudentProfile?

  // staffprofileモデルとのリレーション
  staffProfile StaffProfile?

  // Recordとのリレーション
  record Record[]

  accounts Account[]

  // WaitingListモデルとのリレーション
  waitinglist WaitingList[]

  // StaffNgとのリレーション
  staffng StaffNg[]

  // Bookingとのリレーション
  booking Booking[]
}

// 生徒プロフィール情報
model StudentProfile {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  department     String? // 学科
  schoolYear     String? // 学年
  tel            String? // 電話番号
  graduationYear String? // 卒業年
  qualification  String? // 資格
  workLocation   String? // 希望勤務地

  // Userとの逆向きのリレーション
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

// 職員プロフィール情報
model StaffProfile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  gender      String? // 性別
  Strengths   String? // 得意なこと
  tastes      String? // 趣味
  workhistory String? // 勤務歴

  // Userとの逆向きのリレーション
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Record {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String? // 面談の内容（ES添削、面談など）
  progress String? // テキスト
  ymd      String? // 日次

  // Userとのリレーション
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@index([progress], name: "idx_calte_progress")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// 職員NG日程用モデル
model StaffNg {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId // オブジェクトID
  ymd  String? // 年月日
  time String[] // 時間帯 ＊配列で格納

  // Userとの逆向きのリレーション
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

// 予約承認待ちリストのモデル
// 暫定版 ＊変更される可能性あり
model WaitingList {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId // オブジェクトID
  studentUserId   String? // 予約画面を操作している学生のユーザーモデルのオブジェクトid
  studentName     String? // 予約画面を操作している学生の名前
  staffUserId     String? // 指定職員のユーザーモデルのオブジェクトid
  staffName       String? // 指定職員の名前
  details         String? // 面談内容
  firstYmd        String? // 第一希望の日時
  firstStartTime  String? // 第一希望の開始時刻
  firstEndTime    String? // 第一希望の終了時刻
  secondYmd       String? // 第二希望の日時
  secondStartTime String? // 第二希望の開始時刻
  secondEndTime   String? // 第二希望の終了時刻
  thirdYmd        String? // 第三希望の日時
  thirdStartTime  String? // 第三希望の開始時刻
  thirdEndTime    String? // 第三希望の終了時刻
  createdAt       DateTime?   @default(now()) // リクエストが作成された時間

  // Userとの逆向きのリレーション
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// 予約リストのモデル
// 暫定版 ＊変更される可能性あり
model Booking {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId // オブジェクトID
  studentUserId String? // 予約画面を操作している学生のユーザーモデルのオブジェクトid
  studentName   String? // 学生の名前
  staffUserId   String? // 指定職員のユーザーモデルのオブジェクトid
  staffName     String? // 職員の名前
  ymd           String? // 年月日
  time          String[] // 時間帯 ＊配列で格納
  details       String? // 面談内容

  // Userとの逆向きのリレーション
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@unique(fields: [studentUserId, staffUserId, ymd], name: "booking_id") // 学生・職員のemailとymdの複合主キー 名前は"booking_id"
}
